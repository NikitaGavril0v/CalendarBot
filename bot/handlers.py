from telegram import (
    Update,
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler
)
from config import DB_NAME, TIMEZONE, logger
from database import DatabaseHandler
from tg_calendar import Calendar
import pytz
import sqlite3
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏–∑ config
from config import (
    NAME, DATE, EVENT_NAME, EVENT_DESCRIPTION, EVENT_TIME, EVENT_MAX, PHONE,
    EDIT_CHOICE, EDIT_NAME, EDIT_DESCRIPTION, EDIT_TIME, EDIT_DATE, EDIT_MAX,
    CONFIRM_DELETE, ADMIN_MENU, ADD_ADMIN, REMOVE_ADMIN
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    DatabaseHandler.update_user_info({
        'id': user.id,
        'first_name': user.first_name,
        'last_name': user.last_name,
        'username': user.username
    })

    if not DatabaseHandler.get_user_phone(user.id):
        contact_button = KeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)
        await update.message.reply_text(
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:",
            reply_markup=ReplyKeyboardMarkup([[contact_button]], one_time_keyboard=True)
        )
        return PHONE

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è–º–∏.\n"
        "–ê–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ /addevent\n"
        "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ /events",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

async def contact_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    phone = update.message.contact.phone_number
    DatabaseHandler.update_contact(user.id, phone)
    await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.", reply_markup=ReplyKeyboardRemove())
    return await start(update, context)

async def add_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if not DatabaseHandler.is_admin(user_id):
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π!")
        return

    context.user_data['creating_event'] = {}
    markup = Calendar.create_calendar()
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —Å–æ–±—ã—Ç–∏—è:", reply_markup=markup)
    return DATE

async def date_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data.startswith('nav_'):
        year, month = map(int, query.data.split('_')[1].split('-'))
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
            reply_markup=Calendar.create_calendar(year, month))

    if query.data.startswith('view_'):
        date = query.data.split('_')[1]
        context.user_data['creating_event']['date'] = date
        await query.edit_message_text("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
        return EVENT_NAME

async def name_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text.strip()
    if not name:
        await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return EVENT_NAME

    context.user_data['creating_event']['name'] = name
    await update.message.reply_text("üìÑ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
    return EVENT_DESCRIPTION

async def description_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if not text:
        await update.message.reply_text("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return EVENT_DESCRIPTION

    context.user_data['creating_event']['description'] = text
    await update.message.reply_text("‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä 14:30):")
    return EVENT_TIME

async def time_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    time_str = update.message.text.strip()
    try:
        datetime.strptime(time_str, "%H:%M")
        context.user_data['creating_event']['time'] = time_str
        await update.message.reply_text("üë• –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (0 - –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π):")
        return EVENT_MAX
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä 14:30)")
        return EVENT_TIME

async def max_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        max_part = int(update.message.text.strip())
        if max_part < 0:
            raise ValueError

        with sqlite3.connect(DB_NAME) as conn:
            conn.execute('''
                INSERT INTO events (date, time, name, description, creator_id, max_participants)
                 VALUES (?, ?, ?, ?, ?, ?)
            ''', (
                context.user_data['creating_event']['date'],
                context.user_data['creating_event'].get('time', ''),
                context.user_data['creating_event']['name'],  # –î–æ–±–∞–≤–ª–µ–Ω–æ –∏–º—è
                context.user_data['creating_event']['description'],
                update.message.from_user.id,
                max_part
            ))
            conn.commit()

        await update.message.reply_text("‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ–µ 0")
        return EVENT_MAX

async def show_events(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    markup = Calendar.create_calendar(user_id=user_id)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–±—ã—Ç–∏–π:", reply_markup=markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id

    try:
        if data.startswith('edit_'):
            event_id = data.split('_')[1]
            return await start_edit_event(update, context)

        elif data.startswith('delete_'):
            event_id = data.split('_')[1]
            return await confirm_delete_handler(update, context)

        elif data.startswith('nav_'):
            year, month = map(int, data.split('_')[1].split('-'))
            await query.edit_message_text(
                text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
                reply_markup=Calendar.create_calendar(year, month, user_id)
            )

        elif data.startswith('view_'):
            date = data.split('_')[1]
            await show_events_for_date(query, date, user_id)

        elif data.startswith('event_'):
            parts = data.split('_')
            if len(parts) == 3:
                action, event_id = parts[1], parts[2]
                await handle_event_action(query, event_id, action, user_id)
            else:
                await query.edit_message_text("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
        await query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def show_events_for_date(query, date: str, user_id: int):
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–¥–∞ –∏ –º–µ—Å—è—Ü–∞
        selected_date = datetime.strptime(date, "%Y-%m-%d")
        year = selected_date.year
        month = selected_date.month
        with sqlite3.connect(DB_NAME) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT id, time, name
                FROM events
                WHERE date = ?
                ORDER BY time
            ''', (date,))
            events = cursor.fetchall()

        if not events:
            await query.edit_message_text(f"–ù–∞ {date} –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π", reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data=f'nav_{year}-{month}')]
                    ]))
            return

        # –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ - —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
        if len(events) == 1:
            event_id, time, desc = events[0]
            await show_single_event(query, event_id, user_id, date)
            return

        # –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–π –Ω–µ—Å–∫–æ–ª—å–∫–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
        keyboard = []
        for eid, time, name in events:
            btn_text = f"{time} - {name[:15]}..." if time else name[:20]
            keyboard.append([InlineKeyboardButton(btn_text, callback_data=f'event_details_{eid}')])

        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data=f'nav_{year}-{month}')])

        try:
            await query.edit_message_text(
                text=f"üìÖ –°–æ–±—ã—Ç–∏—è –Ω–∞ {date}:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as e:
            if "Message is not modified" in str(e):
                await query.answer()
            else:
                raise

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–æ–±—ã—Ç–∏–π: {e}")
        await query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def show_single_event(query, event_id: int, user_id: int, date: str):
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–¥–∞ –∏ –º–µ—Å—è—Ü–∞
        selected_date = datetime.strptime(date, "%Y-%m-%d")
        year = selected_date.year
        month = selected_date.month
        with sqlite3.connect(DB_NAME) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT e.name, e.date, e.time, e.description,
                e.max_participants, COUNT(p.user_id),
                EXISTS(SELECT 1 FROM participants WHERE event_id = e.id AND user_id = ?)
                FROM events e
                LEFT JOIN participants p ON e.id = p.event_id
                WHERE e.id = ?
                GROUP BY e.id
            ''', (user_id, event_id))
            event_data = cursor.fetchone()

            if not event_data:
                await query.edit_message_text("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return

            name, date, time, desc, max_part, participants_count, is_registered = event_data
            participants_text = ""

            if DatabaseHandler.is_admin(user_id):
                participants = conn.execute('''
                    SELECT u.username, u.first_name, uc.phone
                    FROM participants p
                    JOIN users u ON p.user_id = u.user_id
                    LEFT JOIN user_contacts uc ON p.user_id = uc.user_id
                    WHERE p.event_id = ?
                ''', (event_id,)).fetchall()
                participants_text = "\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n" + "\n".join(
                    f"‚Ä¢ @{un} ({ph})" if un and ph else
                    f"‚Ä¢ {fn} ({ph})" if ph else
                    f"‚Ä¢ @{un}" if un else f"‚Ä¢ {fn}"
                    for un, fn, ph in participants
                )
            else:
                if max_part > 0:
                    participants_text = f"\nüë• –ó–∞–ø–∏—Å–∞–Ω–æ: {participants_count}/{max_part}"
                else:
                    participants_text = f"\nüë• –ó–∞–ø–∏—Å–∞–Ω–æ: {participants_count}"

            text = f"""
üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: {name}
üìÖ –î–∞—Ç–∞: {date}
‚è∞ –í—Ä–µ–º—è: {time or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {desc}
{participants_text}
            """.strip()

            keyboard = []
            if is_registered:
                keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f'event_leave_{event_id}')])
            else:
                if max_part == 0 or participants_count < max_part:
                    keyboard.append([InlineKeyboardButton("‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f'event_join_{event_id}')])

            if DatabaseHandler.is_admin(user_id):
                keyboard.append([
                    InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f'edit_{event_id}'),
                    InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f'delete_{event_id}')
                ])

            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data=f'nav_{year}-{month}')])

            try:
                await query.edit_message_text(
                    text=text,
                    reply_markup=InlineKeyboardMarkup(keyboard))
            except Exception as e:
                if "Message is not modified" in str(e):
                    await query.answer()
                else:
                    raise

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–æ–±—ã—Ç–∏—è: {e}")
        await query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def handle_event_action(query, event_id: int, action: str, user_id: int):
    try:
        with sqlite3.connect(DB_NAME) as conn:
            cursor = conn.cursor()

            if action == 'details':
                cursor.execute('''
                    SELECT e.name, e.date, e.time, e.description,
                    e.max_participants, COUNT(p.user_id),
                    EXISTS(SELECT 1 FROM participants WHERE event_id = e.id AND user_id = ?)
                    FROM events e
                    LEFT JOIN participants p ON e.id = p.event_id
                    WHERE e.id = ?
                    GROUP BY e.id
                ''', (user_id, event_id))
                event_data = cursor.fetchone()

                if not event_data:
                    await query.edit_message_text("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    return

                name, date, time, desc, max_part, participants_count, is_registered = event_data
                participants_text = ""

                if DatabaseHandler.is_admin(user_id):
                    participants = conn.execute('''
                        SELECT u.username, u.first_name, uc.phone
                        FROM participants p
                        JOIN users u ON p.user_id = u.user_id
                        LEFT JOIN user_contacts uc ON p.user_id = uc.user_id
                        WHERE p.event_id = ?
                    ''', (event_id,)).fetchall()
                    participants_text = "\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n" + "\n".join(
                        f"‚Ä¢ @{un} ({ph})" if un and ph else
                        f"‚Ä¢ {fn} ({ph})" if ph else
                        f"‚Ä¢ @{un}" if un else f"‚Ä¢ {fn}"
                        for un, fn, ph in participants
                    )
                else:
                    if max_part > 0:
                        participants_text = f"\nüë• –ó–∞–ø–∏—Å–∞–Ω–æ: {participants_count}/{max_part}"
                    else:
                        participants_text = f"\nüë• –ó–∞–ø–∏—Å–∞–Ω–æ: {participants_count}"

                text = f"""
üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: {name}
üìÖ –î–∞—Ç–∞: {date}
‚è∞ –í—Ä–µ–º—è: {time or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {desc}
{participants_text}
                """.strip()

                keyboard = []
                if is_registered:
                    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f'event_leave_{event_id}')])
                else:
                    if max_part == 0 or participants_count < max_part:
                        keyboard.append([InlineKeyboardButton("‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f'event_join_{event_id}')])

                if DatabaseHandler.is_admin(user_id):
                    keyboard.append([
                        InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f'edit_{event_id}'),
                        InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f'delete_{event_id}')
                    ])

                keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f'view_{date}')])

                await query.edit_message_text(
                    text=text,
                    reply_markup=InlineKeyboardMarkup(keyboard))

            elif action in ('join', 'leave'):
                cursor.execute('''
                    SELECT max_participants, COUNT(p.user_id)
                    FROM events e
                    LEFT JOIN participants p ON e.id = p.event_id
                    WHERE e.id = ?
                ''', (event_id,))
                max_part, current = cursor.fetchone()
                cursor.execute('''
                    SELECT e.name, e.date, e.time, e.description,
                    e.max_participants, COUNT(p.user_id),
                    EXISTS(SELECT 1 FROM participants WHERE event_id = e.id AND user_id = ?)
                    FROM events e
                    LEFT JOIN participants p ON e.id = p.event_id
                    WHERE e.id = ?
                    GROUP BY e.id
                ''', (user_id, event_id))
                event_data = cursor.fetchone()
                name, date, time, desc, max_part, participants_count, is_registered = event_data
                with sqlite3.connect(DB_NAME) as conn:
                    cursor = conn.cursor()
                    cursor.execute('''
                        SELECT id, time, name
                        FROM events
                        WHERE date = ?
                        ORDER BY time
                ''', (date,))
                events = cursor.fetchall()

                if action == 'join':
                    try:
                        cursor.execute('INSERT INTO participants VALUES (?, ?)', (event_id, user_id))
                        conn.commit()
                        await query.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å!")
                    except sqlite3.IntegrityError:
                        await query.answer("‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã")

                elif action == 'leave':
                    cursor.execute('DELETE FROM participants WHERE event_id = ? AND user_id = ?', (event_id, user_id))
                    conn.commit()
                    await query.answer("‚úÖ –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞")

                if len(events) == 1:
                    event_id, time, desc = events[0]
                    await show_single_event(query, event_id, user_id, date)
                    return
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏
                await handle_event_action(query, event_id, 'details', user_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
        await query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def start_edit_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    event_id = int(query.data.split('_')[1])

    context.user_data['editing_event'] = {'id': event_id}

    keyboard = [
        [
            InlineKeyboardButton("–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data='edit_name'),
            InlineKeyboardButton("–û–ø–∏—Å–∞–Ω–∏–µ", callback_data='edit_desc'),
        ],
        [
            InlineKeyboardButton("–î–∞—Ç—É", callback_data='edit_date'),
            InlineKeyboardButton("–í—Ä–µ–º—è", callback_data='edit_time'),
        ],
        [
            InlineKeyboardButton("–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data='edit_max'),
            InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data='delete_event'),
        ],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='cancel_edit')]
    ]

    await query.edit_message_text(
        text="‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return EDIT_CHOICE

async def edit_choice_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    choice = query.data

    if choice == 'edit_name':
        await query.edit_message_text("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        return EDIT_NAME
    elif choice == 'edit_desc':
        await query.edit_message_text("üìÑ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
        return EDIT_DESCRIPTION
    elif choice == 'edit_time':
        await query.edit_message_text("‚è∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è (–ß–ß:–ú–ú):")
        return EDIT_TIME
    elif choice == 'edit_date':
        await query.edit_message_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É:",
                                    reply_markup=Calendar.create_calendar())
        return EDIT_DATE
    elif choice == 'edit_max':
        await query.edit_message_text("üë• –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –º–∞–∫—Å. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:")
        return EDIT_MAX
    elif choice == 'delete_event':
        await query.edit_message_text("‚ùå –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ?",
                                    reply_markup=InlineKeyboardMarkup([
                                        [InlineKeyboardButton("–î–∞", callback_data='confirm_delete'),
                                         InlineKeyboardButton("–ù–µ—Ç", callback_data='cancel_edit')]
                                    ]))
        return CONFIRM_DELETE
    elif choice == 'cancel_edit':
        return await cancel_edit(update, context)

async def edit_name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_name = update.message.text.strip()
    event_id = context.user_data['editing_event']['id']
    
    with sqlite3.connect(DB_NAME) as conn:
        conn.execute('UPDATE events SET name = ? WHERE id = ?', (new_name, event_id))
        conn.commit()
    with sqlite3.connect(DB_NAME) as conn:
        event_date = conn.execute('SELECT date FROM events WHERE id = ?', (event_id,)).fetchone()[0]
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîô –ö —Å–æ–±—ã—Ç–∏—é", callback_data=f'view_{event_date}')]
    ])    
    await update.message.reply_text("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=keyboard)
    return ConversationHandler.END

async def edit_description_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_desc = update.message.text.strip()
    event_id = context.user_data['editing_event']['id']

    with sqlite3.connect(DB_NAME) as conn:
        conn.execute('UPDATE events SET description = ? WHERE id = ?', (new_desc, event_id))
        conn.commit()
    with sqlite3.connect(DB_NAME) as conn:
        event_date = conn.execute('SELECT date FROM events WHERE id = ?', (event_id,)).fetchone()[0]
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîô –ö —Å–æ–±—ã—Ç–∏—é", callback_data=f'view_{event_date}')]
    ])
    await update.message.reply_text("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=keyboard)
    return ConversationHandler.END

async def edit_time_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    time_str = update.message.text.strip()
    try:
        datetime.strptime(time_str, "%H:%M")
        event_id = context.user_data['editing_event']['id']

        with sqlite3.connect(DB_NAME) as conn:
            conn.execute('UPDATE events SET time = ? WHERE id = ?', (time_str, event_id))
            conn.commit()
        with sqlite3.connect(DB_NAME) as conn:
            event_date = conn.execute('SELECT date FROM events WHERE id = ?', (event_id,)).fetchone()[0]

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ö —Å–æ–±—ã—Ç–∏—é", callback_data=f'view_{event_date}')]
        ])
        await update.message.reply_text("‚úÖ –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",reply_markup=keyboard)
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!")
        return EDIT_TIME

async def edit_date_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data.startswith('view_'):
        new_date = query.data.split('_')[1]
        event_id = context.user_data['editing_event']['id']

        with sqlite3.connect(DB_NAME) as conn:
            conn.execute('UPDATE events SET date = ? WHERE id = ?', (new_date, event_id))
            conn.commit()
        with sqlite3.connect(DB_NAME) as conn:
            event_date = conn.execute('SELECT date FROM events WHERE id = ?', (event_id,)).fetchone()[0]

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ö —Å–æ–±—ã—Ç–∏—é", callback_data=f'view_{event_date}')]
        ])
        await query.edit_message_text("‚úÖ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=keyboard)
        
        return ConversationHandler.END

    elif query.data.startswith('nav_'):
        year, month = map(int, query.data.split('_')[1].split('-'))
        await query.edit_message_reply_markup(Calendar.create_calendar(year, month))
        return EDIT_DATE

async def edit_max_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        max_part = int(update.message.text.strip())
        if max_part < 0:
            raise ValueError

        event_id = context.user_data['editing_event']['id']

        with sqlite3.connect(DB_NAME) as conn:
            conn.execute('UPDATE events SET max_participants = ? WHERE id = ?', (max_part, event_id))
            conn.commit()
        with sqlite3.connect(DB_NAME) as conn:
            event_date = conn.execute('SELECT date FROM events WHERE id = ?', (event_id,)).fetchone()[0]

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ö —Å–æ–±—ã—Ç–∏—é", callback_data=f'view_{event_date}')]
        ])
        await update.message.reply_text("‚úÖ –õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=keyboard)

        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ ‚â• 0!")
        return EDIT_MAX

async def confirm_delete_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'confirm_delete':
        event_id = context.user_data['editing_event']['id']

        with sqlite3.connect(DB_NAME) as conn:
            conn.execute('DELETE FROM participants WHERE event_id = ?', (event_id,))
            conn.execute('DELETE FROM events WHERE id = ?', (event_id,))
            conn.commit()

        await query.edit_message_text("üóë –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!")
    else:
        await query.edit_message_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

    return ConversationHandler.END

async def cancel_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("‚úñÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    return ConversationHandler.END
    
    text = f"""
üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: {event[1]}
üìÖ –î–∞—Ç–∞: {event[0]}
‚è∞ –í—Ä–µ–º—è: {event[3] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {event[2]}
üë• –ú–∞–∫—Å. —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {event[4] if event[4] > 0 else '–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π'}
    """.strip()
    
    await context.bot.send_message(
        chat_id=chat_id,
        text=text,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–æ–±—ã—Ç–∏—è–º", callback_data=f'view_{event[0]}')]
        ])
    )

async def delete_event_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    event_id = query.data.split('_')[1]

    context.user_data['deleting_event'] = event_id
    await query.edit_message_text(
        text="‚ùå –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ?",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–î–∞", callback_data='confirm_delete'),
             InlineKeyboardButton("–ù–µ—Ç", callback_data='cancel_delete')]
        ])
    )
    return CONFIRM_DELETE

async def send_event_notifications(context: ContextTypes.DEFAULT_TYPE):
    # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    timezone_str = TIMEZONE
    timezone = pytz.timezone(timezone_str)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
    today = datetime.now(timezone).strftime("%Y-%m-%d")
    
    with sqlite3.connect(DB_NAME) as conn:
        events = conn.execute('''
            SELECT id, name, time
            FROM events
            WHERE date = ?
        ''', (today,)).fetchall()

        for event_id, name, time in events: 
            participants = conn.execute('''
                SELECT user_id FROM participants WHERE event_id = ?
            ''', (event_id,)).fetchall()

            for (user_id,) in participants:
                try:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text = f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Å–µ–≥–æ–¥–Ω—è –≤ {time} - {name}" 
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

async def manage_admins(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not DatabaseHandler.is_admin(user.id):
        if update.callback_query:
            await update.callback_query.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!", show_alert=True)
        else:
            await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –º–µ–Ω—é!")
        return ConversationHandler.END

    admins = DatabaseHandler.get_admins_with_info()
    text = "üëë –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n"
    
    for admin in admins:
        user_id, first_name, last_name, username = admin
        name = f"{first_name} {last_name}".strip() or username or f"ID: {user_id}"
        text += f"‚Ä¢ {name} (ID: {user_id})\n"

    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data='admin_add'),
         InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å", callback_data='admin_remove')],
        [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data='admin_close')]
    ]
    
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    
    return ADMIN_MENU

async def admin_add_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã
    users = DatabaseHandler.get_all_users()
    
    if not users:
        await query.edit_message_text("‚ùå –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return ADMIN_MENU
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    keyboard = []
    temp_row = []
    for user in users:
        user_id, first_name, last_name, username = user
        name = f"{first_name} {last_name}".strip() or username or f"ID: {user_id}"
        btn = InlineKeyboardButton(name, callback_data=f'add_admin_{user_id}')
        
        # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
        if len(temp_row) < 2:
            temp_row.append(btn)
        else:
            keyboard.append(temp_row)
            temp_row = [btn]
    
    if temp_row:
        keyboard.append(temp_row)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_back')])
    
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ADD_ADMIN

async def add_admin_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = int(query.data.split('_')[2])
    
    if DatabaseHandler.is_admin(user_id):
        await query.edit_message_text("‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –í –º–µ–Ω—é –∞–¥–º–∏–Ω–æ–≤", callback_data='admin_back')]
        ]))
        return ADMIN_MENU
    
    with sqlite3.connect(DB_NAME) as conn:
        conn.execute('INSERT INTO admins (user_id) VALUES (?)', (user_id,))
        conn.commit()

    user_info = next((u for u in DatabaseHandler.get_all_users() if u[0] == user_id), None)
    name = f"ID: {user_id}"
    if user_info:
        name = f"{user_info[1]} {user_info[2]}".strip() or user_info[3] or name
    
    await query.edit_message_text(
        f"‚úÖ {name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã!",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –í –º–µ–Ω—é –∞–¥–º–∏–Ω–æ–≤", callback_data='admin_back')]
        ])
    )
    return ADMIN_MENU

async def admin_remove_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    admins = DatabaseHandler.get_admins_with_info()
    keyboard = []
    for admin in admins:
        user_id, first_name, last_name, username = admin
        name = f"{first_name} {last_name}".strip() or username or f"ID: {user_id}"
        keyboard.append([InlineKeyboardButton(f"‚ùå {name}", callback_data=f'remove_admin_{user_id}')])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_back')])
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", 
                                reply_markup=InlineKeyboardMarkup(keyboard))
    return REMOVE_ADMIN

async def remove_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    admin_id = int(query.data.split('_')[2])

    with sqlite3.connect(DB_NAME) as conn:
        conn.execute('DELETE FROM admins WHERE user_id = ?', (admin_id,))
        conn.commit()
    
    await query.edit_message_text(
        f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} —É–¥–∞–ª–µ–Ω!",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –í –º–µ–Ω—é –∞–¥–º–∏–Ω–æ–≤", callback_data='admin_back')]
        ])
    )
    return ADMIN_MENU

async def admin_close(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.delete()
    return ConversationHandler.END

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üìñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/events - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
/myevents - –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∑–∞–ø–∏—Å–∏
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ

‚öôÔ∏è *–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:*
/addevent - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
/admins - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
    """
    await update.message.reply_text(help_text, parse_mode='Markdown')
    
async def my_events(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    context.user_data['my_events_page'] = 0
    await show_my_events_page(update, context, user_id, 0)

def get_handlers():
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
    start_conv = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            PHONE: [MessageHandler(filters.CONTACT, contact_handler)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
    event_creation_conv = ConversationHandler(
        entry_points=[CommandHandler('addevent', add_event)],
        states={
            DATE: [CallbackQueryHandler(date_received)],
            EVENT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name_received)],
            EVENT_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, description_received)],
            EVENT_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, time_received)],
            EVENT_MAX: [MessageHandler(filters.TEXT & ~filters.COMMAND, max_received)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
    edit_event_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(pattern=r'^edit_(\d+)$', callback=start_edit_event)],
        states={
            EDIT_CHOICE: [CallbackQueryHandler(edit_choice_handler)],
            EDIT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_name_handler)],
            EDIT_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_description_handler)],
            EDIT_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_time_handler)],
            EDIT_DATE: [CallbackQueryHandler(edit_date_handler)],
            EDIT_MAX: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_max_handler)],
            CONFIRM_DELETE: [CallbackQueryHandler(confirm_delete_handler)]
        },
        fallbacks=[CommandHandler('cancel', cancel_edit)],
        map_to_parent={ConversationHandler.END: ConversationHandler.END}
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
    admin_management_conv = ConversationHandler(
        entry_points=[CommandHandler('admins', manage_admins)],
        states={
            ADMIN_MENU: [
                CallbackQueryHandler(admin_add_handler, pattern='^admin_add$'),
                CallbackQueryHandler(admin_remove_handler, pattern='^admin_remove$'),
                CallbackQueryHandler(admin_close, pattern='^admin_close$'),
                CallbackQueryHandler(manage_admins, pattern='^admin_back$')
            ],
            ADD_ADMIN: [
                CallbackQueryHandler(add_admin_selected, pattern=r'^add_admin_\d+$'),
                CallbackQueryHandler(manage_admins, pattern='^admin_back$')
            ],
            REMOVE_ADMIN: [
                CallbackQueryHandler(remove_admin, pattern=r'^remove_admin_\d+$'),
                CallbackQueryHandler(manage_admins, pattern='^admin_back$')
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    return [
        start_conv,
        event_creation_conv,
        edit_event_conv,
        admin_management_conv,
        CommandHandler('events', show_events),
        CommandHandler('help', help_command),
        CommandHandler('myevents', my_events),
        CallbackQueryHandler(button_handler),
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
    ]

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é.")
    return ConversationHandler.END