from datetime import datetime, timedelta
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
import sqlite3
from config import DB_NAME

class Calendar:
    @staticmethod
    def create_calendar(year=None, month=None, user_id=None):
        now = datetime.now()
        year = year or now.year
        month = month or now.month
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        with sqlite3.connect(DB_NAME) as conn:
            cursor = conn.cursor()
            
            # –î–∞—Ç—ã —Å –ª—é–±—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏
            cursor.execute('''
                SELECT DISTINCT date 
                FROM events 
                WHERE strftime('%Y-%m', date) = ?
            ''', (f"{year}-{month:02}",))
            event_dates = {row[0] for row in cursor.fetchall()}
            
            # –î–∞—Ç—ã —Å —É—á–∞—Å—Ç–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_event_dates = set()
            if user_id:
                cursor.execute('''
                    SELECT DISTINCT e.date
                    FROM events e
                    JOIN participants p ON e.id = p.event_id
                    WHERE p.user_id = ? 
                    AND strftime('%Y-%m', e.date) = ?
                ''', (user_id, f"{year}-{month:02}"))
                user_event_dates = {row[0] for row in cursor.fetchall()}

        # –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
        months_ru = [
            '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
            '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
        ]
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        keyboard = [
            [InlineKeyboardButton(f"{months_ru[month-1]} {year}", callback_data='ignore')],
            [InlineKeyboardButton(day, callback_data='ignore') for day in ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]]
        ]

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–Ω–∏ –º–µ—Å—è—Ü–∞
        first_day = datetime(year, month, 1)
        last_day = datetime(year + month//12, month%12 + 1, 1) - timedelta(days=1)
        
        # –ü—É—Å—Ç—ã–µ –¥–Ω–∏ –≤ –Ω–∞—á–∞–ª–µ
        week = [InlineKeyboardButton(" ", callback_data='ignore') 
               for _ in range(first_day.weekday() % 7)]

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–Ω–∏
        for day in range(1, last_day.day + 1):
            current_date = datetime(year, month, day)
            date_str = current_date.strftime("%Y-%m-%d")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏
            is_today = current_date.date() == now.date()
            has_events = date_str in event_dates
            has_participation = date_str in user_event_dates
            
            emoji = ""
            if has_participation:
                emoji = "üìå"
            elif has_events:
                emoji = "|"
                
            day_str = f"{emoji}{day}{'|' if has_events and not has_participation else ''}"

            week.append(InlineKeyboardButton(
                day_str,
                callback_data=f'view_{date_str}'
            ))
            
            # –ù–æ–≤–∞—è –Ω–µ–¥–µ–ª—è
            if len(week) == 7:
                keyboard.append(week)
                week = []

        # –ü—É—Å—Ç—ã–µ –¥–Ω–∏ –≤ –∫–æ–Ω—Ü–µ
        if week:
            week += [InlineKeyboardButton(" ", callback_data='ignore')] * (7 - len(week))
            keyboard.append(week)

        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        prev_year, prev_month = (year-1, 12) if month == 1 else (year, month-1)
        next_year, next_month = (year+1, 1) if month == 12 else (year, month+1)
        
        keyboard.append([
            InlineKeyboardButton("<", callback_data=f'nav_{prev_year}-{prev_month}'),
            InlineKeyboardButton(">", callback_data=f'nav_{next_year}-{next_month}')
        ])

        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def get_current_month():
        now = datetime.now()
        return now.year, now.month